// Skaletek KYC Plugin Setup  
// This script automatically configures AWS Amplify integration for Android

task configureKYCIntegration {
    doLast {
        def sourceFile = null
        def proguardSourceFile = null
        def pubCacheDir = file("${System.getProperty('user.home')}/.pub-cache/hosted/pub.dev")
        
        // Look for the plugin in pub cache
        if (pubCacheDir.exists()) {
            pubCacheDir.listFiles().each { dir ->
                if (dir.name.startsWith('skaletek_kyc-') && dir.isDirectory()) {
                    def configFile = file("${dir.absolutePath}/assets/amplifyconfiguration.json")
                    def proguardFile = file("${dir.absolutePath}/android/skaletek-proguard-rules.pro")
                    
                    if (configFile.exists()) {
                        sourceFile = configFile
                    }
                    if (proguardFile.exists()) {
                        proguardSourceFile = proguardFile
                    }
                    
                    if (sourceFile && proguardSourceFile) {
                        return true // break from closure
                    }
                }
            }
        }
        
        // Fallback: check local development paths
        if (!sourceFile || !proguardSourceFile) {
            def localPaths = [
                "${project.rootDir}/../",
                "${project.rootDir}/../../"
            ]
            
            for (String basePath : localPaths) {
                if (!sourceFile) {
                    def configCandidate = file("${basePath}assets/amplifyconfiguration.json")
                    if (configCandidate.exists()) {
                        sourceFile = configCandidate
                    }
                }
                
                if (!proguardSourceFile) {
                    def proguardCandidate = file("${basePath}android/skaletek-proguard-rules.pro")
                    if (proguardCandidate.exists()) {
                        proguardSourceFile = proguardCandidate
                    }
                }
                
                if (sourceFile && proguardSourceFile) {
                    break
                }
            }
        }
        
        // Target directories
        def rawTargetDir = file("src/main/res/raw")
        def appDir = file(".")
        
        // Copy amplifyconfiguration.json
        if (sourceFile && sourceFile.exists()) {
            rawTargetDir.mkdirs()
            def targetFile = new File(rawTargetDir, "amplifyconfiguration.json")
            targetFile.text = sourceFile.text
            // println "✅ Skaletek KYC: amplifyconfiguration.json copied successfully"
        } else {
            println "⚠️ Skaletek KYC: amplifyconfiguration.json not found"
        }
        
        // Copy ProGuard rules
        if (proguardSourceFile && proguardSourceFile.exists()) {
            def proguardTargetFile = new File(appDir, "skaletek-proguard-rules.pro")
            proguardTargetFile.text = proguardSourceFile.text
            // println "✅ Skaletek KYC: ProGuard rules copied successfully"
            
            // Check if proguard rules are configured in build.gradle
            def buildGradleFile = new File(appDir, "build.gradle")
            def buildGradleKtsFile = new File(appDir, "build.gradle.kts")
            def targetBuildFile = null
            
            if (buildGradleKtsFile.exists()) {
                targetBuildFile = buildGradleKtsFile
            } else if (buildGradleFile.exists()) {
                targetBuildFile = buildGradleFile
            }
            
            if (targetBuildFile) {
                def buildContent = targetBuildFile.text
                def proguardRulePattern = /proguardFiles.*skaletek-proguard-rules\.pro/
                
                if (!buildContent.matches(/(?s).*skaletek-proguard-rules\.pro.*/)) {
                    println "⚠️ Skaletek KYC: Please add ProGuard rules to your build.gradle(.kts):"
                    if (targetBuildFile.name.endsWith('.kts')) {
                        println """
                        Add this to your release buildType:
                        buildTypes {
                            release {
                                proguardFiles(
                                    getDefaultProguardFile("proguard-android-optimize.txt"),
                                    "proguard-rules.pro",
                                    "skaletek-proguard-rules.pro"
                                )
                                isMinifyEnabled = true
                            }
                        }
                        """
                    } else {
                        println """
                        Add this to your release buildType:
                        buildTypes {
                            release {
                                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', 'skaletek-proguard-rules.pro'
                                minifyEnabled true
                            }
                        }
                        """
                    }
                } else {
                    println "✅ Skaletek KYC: ProGuard rules configuration detected"
                }
            }
        } else {
            println "⚠️ Skaletek KYC: ProGuard rules file not found"
        }
        
        if (sourceFile || proguardSourceFile) {
            println "✅ Skaletek KYC: Android integration configured successfully"
        } else {
            println "⚠️ Skaletek KYC: Configuration incomplete"
            println "   Make sure the skaletek_kyc package is added to your pubspec.yaml"
            println "   and run 'flutter pub get' first"
        }
    }
}

// Automatically run before Android build
afterEvaluate {
    if (project.hasProperty('android')) {
        android.applicationVariants.all { variant ->
            variant.preBuild.dependsOn configureKYCIntegration
        }
    }
}